clearvars
clc
%% Question 4 
addpath("utils") % add utils functionsbra

% Load hyperparameters of the model
str = fileread('params.json');
params = jsondecode(str);

% Discretization
k_grid = linspace(params.k_min, params.k_max, params.k_points);
k_grid = k_grid(:); % to column vector (N_k x 1)

[logz_grid, prob_z_transition] = tauchen_hussey(params.logz_points, params.rho, params.sigma, params.mu);
z_grid = exp(logz_grid); % log inverse

% Initial guess for value function (i.e., zeros)
V_guess = zeros(params.k_points, params.logz_points);
% to store partial policy values
policy_K_matrix = zeros(params.k_points, params.logz_points);

tic; % start time
for iter = 1:params.niter
    V_new = zeros(params.k_points, params.logz_points); % current new values
    
    % Iterate over all the points on the K grid
    for i_k = 1:params.k_points
        display(i_k)
        current_K = k_grid(i_k); % take the current value
        
        % Iterate over all points on the production grid z
        for i_z = 1:params.logz_points
            current_z = z_grid(i_z); % current z
        
            % BELLMAN =========================================================
            [v_val, pol_k_prime, pol_adjust_flag] = bellman_1(...
                current_K, current_z, ...
                k_grid, z_grid, ...
                V_guess, prob_z_transition, ...
                params, i_k, 'fixed');
            % =================================================================    
            V_new(i_k, i_z) = v_val;
            policy_K_matrix(i_k, i_z) = pol_k_prime;
        end
    end
    
    % Check convergence
    diff = max(abs(V_new(:) - V_guess(:)));
    if diff < TOL
        disp(['Convergence done at iteration: ', num2str(iter)]);
        V_guess = V_new; % Guardar el último valor calculado
        break; % Salir del bucle de iteraciones
    end
    
    % Actualizar la conjetura para la siguiente iteración
    V_guess = V_new;
    
    if iter == MAX_ITER
        disp('Max. iteration achieved, no convergence obtained.');
    end
end
